import os
import ccxt
from dotenv import load_dotenv

def get_exchange():
    load_dotenv()
    ex = ccxt.bybit({
        "apiKey": os.getenv("API_KEY"),
        "secret": os.getenv("API_SECRET"),
        "enableRateLimit": True,
        # –≤–∞–∂–Ω–æ –¥–ª—è –ø–µ—Ä–ø–µ—Ç—É–∞–ª–æ–≤
        "options": {"defaultType": "swap"},
    })
    if hasattr(ex, "set_sandbox_mode"):
        ex.set_sandbox_mode(os.getenv("TESTNET", "true").lower() == "true")
    return ex

def fetch_my_position(ex, symbol):
    # Bybit –≤ ccxt –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π
    positions = ex.fetch_positions([symbol])
    for p in positions:
        if p.get("symbol") == symbol:
            return p
    return None

def main():
    symbol = os.getenv("SYMBOL", "BTCUSDT")

    ex = get_exchange()
    pos = fetch_my_position(ex, symbol)

    if not pos:
        print(f"‚ùå No position found for {symbol}")
        return

    side = (pos.get("side") or "").lower()   # 'long' / 'short' / ''
    contracts = float(pos.get("contracts") or 0)  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ (BTC)
    entry = float(pos.get("entryPrice") or 0)
    upnl = pos.get("unrealizedPnl")

    print("üìå Current position:", {
        "side": side, "contracts": contracts, "entryPrice": entry, "uPnL": upnl
    })

    if contracts <= 0:
        print("‚ÑπÔ∏è Position size is zero ‚Äî nothing to close.")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
    close_side = "sell" if side == "long" else "buy" if side == "short" else None
    if close_side is None:
        print("‚ùå Unknown position side, abort.")
        return

    # –ü–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ: reduceOnly market –Ω–∞ –≤–µ—Å—å –æ–±—ä—ë–º
    params = {"reduceOnly": True}
    print(f"üßπ Closing {contracts} {symbol} by market ({close_side}, reduceOnly)")
    order = ex.create_order(symbol, "market", close_side, contracts, None, params)
    print("‚úÖ Close order placed:", order.get("id") or order.get("orderId"))

    # –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è –ø–æ–∑–∏—Ü–∏—é
    new_pos = fetch_my_position(ex, symbol)
    if new_pos:
        print("üîé New position:", {
            "side": new_pos.get("side"),
            "contracts": new_pos.get("contracts"),
            "entryPrice": new_pos.get("entryPrice"),
        })

if __name__ == "__main__":
    main()
